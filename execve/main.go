package main

//go:generate go run github.com/cilium/ebpf/cmd/bpf2go -cc clang bpf execve.c -- -I../headers
// This directive runs the `bpf2go` tool to generate Go bindings for the eBPF program defined in `execve.c`.
// It uses the Clang compiler (`-cc clang`) and includes the headers from `../headers`.

import (
	"C" // Enables calling C functions from the Go program.
	"fmt"

	"github.com/cilium/ebpf/link" // Provides tools to attach eBPF programs to kernel hooks.
)

func main() {
	// Define a variable to hold the eBPF objects generated by bpf2go.
	ebpfObj := bpfObjects{}

	// Load the eBPF program into the kernel using the generated bindings.
	err := loadBpfObjects(&ebpfObj, nil)
	if err != nil {
		// If loading fails, terminate the program with an error message.
		panic(err)
	}
	// Ensure the eBPF objects are closed properly to release resources.
	defer ebpfObj.Close()

	// Attach the eBPF program to the `sys_enter_execve` tracepoint.
	hook, err := link.Tracepoint("syscalls", "sys_enter_execve", ebpfObj.TraceExecve, nil)
	if err != nil {
		// If attaching fails, terminate the program with an error message.
		panic(err)
	}
	// Ensure the hook is closed properly to detach the eBPF program when the program exits.
	defer hook.Close()

	// Print a message to indicate that the program is waiting for events.
	fmt.Println("Waiting for event to trigger!")
	select {}
}
